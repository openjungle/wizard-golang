{{ $length := len .Fields -}}
package {{pkg .Table}}

import (
	"database/sql"
	"fmt"
	"time"

	"github.com/jmoiron/sqlx"
	"{{index .PackageRoutes "package_name"}}/internal/models"
)

// sqlServer estructura de conexi√≥n a la BD de mssql
type sqlserver struct {
	DB   *sqlx.DB
	user *models.User
	TxID string
}


func new{{.Name}}SqlServerRepository(db *sqlx.DB, user *models.User, txID string) *sqlserver {
	return &sqlserver{
		DB:   db,
		user: user,
		TxID: txID,
	}
}

// Create registra en la BD
func (s *sqlserver) create(m *{{.Name}}) error {
	var id int64
	date := time.Now()
    m.UpdatedAt = date
    m.CreatedAt = date
    m.UserCreator = s.user.ID
    const sqlInsert = `INSERT INTO {{.Table}} ({{range $i, $v := .Fields}}{{.Name}}{{if lt $i (dec $length)}}, {{end}}{{end -}}, user_creator, created_at, updated_at) VALUES ({{range $i, $v := .Fields}}@{{.Name}}{{if lt $i (dec $length)}}, {{end}}{{end -}}, @user_creator, @created_at, @updated_at) SELECT ID = convert(bigint, SCOPE_IDENTITY()) `
    stmt, err := s.DB.Prepare(sqlInsert)
    if err != nil {
    	return err
    }
    defer stmt.Close()
    err = stmt.QueryRow(
    	{{range .Fields -}}
           	sql.Named("{{.Name}}", m.{{ucc .Name}}),
           {{end -}}
            sql.Named("created_at", m.CreatedAt),
            sql.Named("updated_at", m.UpdatedAt),
            sql.Named("user_creator", m.UserCreator),
    ).Scan(&id)
    if err != nil {
    	return err
    }
    m.ID = id
    return nil
}

// Update actualiza un registro en la BD
func (s *sqlserver) update(m *{{.Name}}) error {
    date := time.Now()
    m.UpdatedAt = date
    m.UserCreator = s.user.ID
	const sqlUpdate = `UPDATE {{.Table}} SET {{range $i, $v := .Fields}}{{.Name}} = :{{.Name}}, {{end -}}user_creator = :user_creator, updated_at = :updated_at WHERE id = :id `
	rs, err := s.DB.NamedExec(sqlUpdate, &m)
	if err != nil {
		return err
	}
	if i, _ := rs.RowsAffected(); i == 0 {
		return fmt.Errorf("ecatch:108")
	}
	return nil
}

// Delete elimina un registro de la BD
func (s *sqlserver) delete(id int64) error {
    {{if eq .LogicDelete "logic"}}
    // Logical delete
    date := time.Now()
    const psqlLogicalDelete = `UPDATE {{.Table}} SET is_deleted = 1, user_deleter = :user_deleter, deleted_at = :deleted_at WHERE id = :id`
    m := {{.Name}}{ID: id, UserDeleter: &s.user.ID, DeletedAt: &date}
    rs, err := s.DB.NamedExec(psqlLogicalDelete, &m)
    if err != nil {
        return err
    }
    if i, _ := rs.RowsAffected(); i == 0 {
        return fmt.Errorf("ecatch:108")
    }
    {{else}}
    // Physical delete
    const psqlDelete = `DELETE FROM {{.Table}} WHERE id = :id`
    m := {{.Name}}{ID: id}
    rs, err := s.DB.NamedExec(psqlDelete, &m)
    if err != nil {
        return err
    }
    if i, _ := rs.RowsAffected(); i == 0 {
        return fmt.Errorf("ecatch:108")
    }
    {{end}}
    return nil
}

// GetByID consulta un registro por su ID
func (s *sqlserver) getByID(id int64) (*{{.Name}}, error) {
	const sqlGetByID = `SELECT convert(nvarchar(50), id) id , {{range .Fields}}{{.Name}}, {{end -}}is_deleted, user_deleter, deleted_at, user_creator, created_at, updated_at FROM {{.Table}}  WITH (NOLOCK)  WHERE id = @id `
	mdl := {{.Name}}{}
	err := s.DB.Get(&mdl, sqlGetByID, sql.Named("id", id))
	if err != nil {
		if err == sql.ErrNoRows {
			return nil, nil
		}
		return &mdl, err
	}
	return &mdl, nil
}

// GetAll consulta todos los registros de la BD
func (s *sqlserver) getAll() ([]*{{.Name}}, error) {
	var ms []*{{.Name}}
	const sqlGetAll = `SELECT convert(nvarchar(50), id) id , {{range .Fields}}{{.Name}}, {{end -}}is_deleted, user_deleter, deleted_at, user_creator, created_at, updated_at FROM {{.Table}}  WITH (NOLOCK) `

	err := s.DB.Select(&ms, sqlGetAll)
	if err != nil {
		if err == sql.ErrNoRows {
			return nil, nil
		}
		return ms, err
	}
	return ms, nil
}
