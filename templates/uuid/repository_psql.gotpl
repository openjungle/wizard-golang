{{ $length := len .Fields -}}
package {{pkg .Table}}

import (
	"database/sql"
	"fmt"
	"time"

	"github.com/jmoiron/sqlx"
    "{{index .PackageRoutes "package_name"}}/internal/models"
)

// psql estructura de conexi√≥n a la BD de postgresql
type psql struct {
	DB   *sqlx.DB
	user *models.User
	TxID string
}

func new{{.Name}}PsqlRepository(db *sqlx.DB, user *models.User, txID string) *psql {
	return &psql{
		DB:   db,
		user: user,
		TxID: txID,
	}
}

// Create registra en la BD
func (s *psql) create(m *{{.Name}}) error {
    date := time.Now()
    m.UserCreator = s.user.ID
    m.UpdatedAt = date
    m.CreatedAt = date
	const psqlInsert = `INSERT INTO {{.Table}} (id ,{{range $i, $v := .Fields}}{{.Name}}{{if lt $i (dec $length)}}, {{end}}{{end -}}, user_creator, created_at, updated_at) VALUES (:id ,{{range $i, $v := .Fields}}:{{.Name}}{{if lt $i (dec $length)}}, {{end}}{{end -}}, :user_creator,:created_at, :updated_at) `
	rs, err := s.DB.NamedExec(psqlInsert, &m)
	if err != nil {
		return err
	}
	if i, _ := rs.RowsAffected(); i == 0 {
        return fmt.Errorf("ecatch:108")
    }
	return nil
}

// Update actualiza un registro en la BD
func (s *psql) update(m *{{.Name}}) error {
    date := time.Now()
    m.UpdatedAt = date
    m.UserCreator = s.user.ID
	const psqlUpdate = `UPDATE {{.Table}} SET {{range $i, $v := .Fields}}{{.Name}} = :{{.Name}}, {{end -}}user_creator = :user_creator, updated_at = :updated_at WHERE id = :id `
	rs, err := s.DB.NamedExec(psqlUpdate, &m)
	if err != nil {
		return err
	}
	if i, _ := rs.RowsAffected(); i == 0 {
		return fmt.Errorf("ecatch:108")
	}
	return nil
}

// Delete elimina un registro de la BD
func (s *psql) delete(id string) error {
    {{if eq .LogicDelete "logic"}}
    // Logical delete
    const psqlLogicalDelete = `UPDATE {{.Table}} SET is_deleted = true, user_deleter = :user_deleter, deleted_at = now() WHERE id = :id`
    m := {{.Name}}{ID: id, UserDeleter: &s.user.ID}
    rs, err := s.DB.NamedExec(psqlLogicalDelete, &m)
    if err != nil {
        return err
    }
    if i, _ := rs.RowsAffected(); i == 0 {
        return fmt.Errorf("ecatch:108")
    }
    {{else}}
    // Physical delete
    const psqlDelete = `DELETE FROM {{.Table}} WHERE id = :id`
    m := {{.Name}}{ID: id}
    rs, err := s.DB.NamedExec(psqlDelete, &m)
    if err != nil {
        return err
    }
    if i, _ := rs.RowsAffected(); i == 0 {
        return fmt.Errorf("ecatch:108")
    }
    {{end}}
    return nil
}

// GetByID consulta un registro por su ID
func (s *psql) getByID(id string) (*{{.Name}}, error) {
	const psqlGetByID = `SELECT id , {{range .Fields}}{{.Name}}, {{end -}}is_deleted, user_deleter, deleted_at, user_creator, created_at, updated_at FROM {{.Table}} WHERE id = $1 `
	mdl := {{.Name}}{}
	err := s.DB.Get(&mdl, psqlGetByID, id)
	if err != nil {
		if err == sql.ErrNoRows {
			return nil, nil
		}
		return &mdl, err
	}
	return &mdl, nil
}

// GetAll consulta todos los registros de la BD
func (s *psql) getAll() ([]*{{.Name}}, error) {
	var ms []*{{.Name}}
	const psqlGetAll = ` SELECT id , {{range .Fields}}{{.Name}}, {{end -}}is_deleted, user_deleter, deleted_at, user_creator, created_at, updated_at FROM {{.Table}} `

	err := s.DB.Select(&ms, psqlGetAll)
	if err != nil {
		if err == sql.ErrNoRows {
			return nil, nil
		}
		return ms, err
	}
	return ms, nil
}
